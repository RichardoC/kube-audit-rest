// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RichardoC/kube-audit-rest/internal/http_listener (interfaces: HttpListener)

// Package mymock is a generated GoMock package.
package mymock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpListener is a mock of HttpListener interface.
type MockHttpListener struct {
	ctrl     *gomock.Controller
	recorder *MockHttpListenerMockRecorder
}

// MockHttpListenerMockRecorder is the mock recorder for MockHttpListener.
type MockHttpListenerMockRecorder struct {
	mock *MockHttpListener
}

// NewMockHttpListener creates a new mock instance.
func NewMockHttpListener(ctrl *gomock.Controller) *MockHttpListener {
	mock := &MockHttpListener{ctrl: ctrl}
	mock.recorder = &MockHttpListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpListener) EXPECT() *MockHttpListenerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockHttpListener) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockHttpListenerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHttpListener)(nil).Start))
}

// Stop mocks base method.
func (m *MockHttpListener) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHttpListenerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHttpListener)(nil).Stop))
}
