// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RichardoC/kube-audit-rest/internal/event_processor (interfaces: EventProcessor)

// Package mymock is a generated GoMock package.
package mymock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventProcessor is a mock of EventProcessor interface.
type MockEventProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockEventProcessorMockRecorder
}

// MockEventProcessorMockRecorder is the mock recorder for MockEventProcessor.
type MockEventProcessorMockRecorder struct {
	mock *MockEventProcessor
}

// NewMockEventProcessor creates a new mock instance.
func NewMockEventProcessor(ctrl *gomock.Controller) *MockEventProcessor {
	mock := &MockEventProcessor{ctrl: ctrl}
	mock.recorder = &MockEventProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventProcessor) EXPECT() *MockEventProcessorMockRecorder {
	return m.recorder
}

// ProcessEvent mocks base method.
func (m *MockEventProcessor) ProcessEvent(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessEvent", arg0, arg1)
}

// ProcessEvent indicates an expected call of ProcessEvent.
func (mr *MockEventProcessorMockRecorder) ProcessEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvent", reflect.TypeOf((*MockEventProcessor)(nil).ProcessEvent), arg0, arg1)
}
