// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RichardoC/kube-audit-rest/internal/metrics (interfaces: Counter,MetricsServer)

// Package mymock is a generated GoMock package.
package mymock

import (
	reflect "reflect"

	metrics "github.com/RichardoC/kube-audit-rest/internal/metrics"
	gomock "github.com/golang/mock/gomock"
)

// MockCounter is a mock of Counter interface.
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter.
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance.
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *MockCounter) Inc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc")
}

// Inc indicates an expected call of Inc.
func (mr *MockCounterMockRecorder) Inc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockCounter)(nil).Inc))
}

// MockMetricsServer is a mock of MetricsServer interface.
type MockMetricsServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServerMockRecorder
}

// MockMetricsServerMockRecorder is the mock recorder for MockMetricsServer.
type MockMetricsServerMockRecorder struct {
	mock *MockMetricsServer
}

// NewMockMetricsServer creates a new mock instance.
func NewMockMetricsServer(ctrl *gomock.Controller) *MockMetricsServer {
	mock := &MockMetricsServer{ctrl: ctrl}
	mock.recorder = &MockMetricsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServer) EXPECT() *MockMetricsServerMockRecorder {
	return m.recorder
}

// CreateAndRegisterCounter mocks base method.
func (m *MockMetricsServer) CreateAndRegisterCounter(arg0, arg1 string) metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndRegisterCounter", arg0, arg1)
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// CreateAndRegisterCounter indicates an expected call of CreateAndRegisterCounter.
func (mr *MockMetricsServerMockRecorder) CreateAndRegisterCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndRegisterCounter", reflect.TypeOf((*MockMetricsServer)(nil).CreateAndRegisterCounter), arg0, arg1)
}

// Start mocks base method.
func (m *MockMetricsServer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMetricsServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetricsServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockMetricsServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockMetricsServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMetricsServer)(nil).Stop))
}
