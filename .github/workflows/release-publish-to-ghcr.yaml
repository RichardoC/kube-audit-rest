name: Publish release's container images ðŸ“¦ to GitHub Container Registry

on:
  release:
    types: [published]

jobs:
  build-and-publish-to-ghcr:
    # Explicitly grant the `secrets.GITHUB_TOKEN` permissions.
    permissions:
      # Grant the ability to write to GitHub Packages (push Docker images to
      # GitHub Container Registry).
      packages: write
      # Needed to upload the code scanning results to code-scanning dashboard.
      security-events: write
    name: Build and publish container images ðŸ“¦ to GitHub Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
        with:
             fetch-depth: 0
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # This is the user that triggered the Workflow. In this case, it will
          # either be the user whom created the Release or manually triggered
          # the workflow_dispatch.
          username: ${{ github.actor }}
          # `secrets.GITHUB_TOKEN` is a secret that's automatically generated by
          # GitHub Actions at the start of a workflow run to identify the job.
          # This is used to authenticate against GitHub Container Registry.
          # See https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret
          # for more detailed information.
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push alpine based image
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile-alpine
          context: .
          push: true # push the image to ghcr
          tags: |
            ghcr.io/richardoc/kube-audit-rest:${{github.ref_name}}-alpine
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push distroless image
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile-distroless
          context: .
          push: true # push the image to ghcr
          tags: |
            ghcr.io/richardoc/kube-audit-rest:${{github.ref_name}}-distroless
            ghcr.io/richardoc/kube-audit-rest:latest
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy vulnerability scanner for distroless container
        uses: aquasecurity/trivy-action@0.13.1
        with:
          image-ref: 'ghcr.io/richardoc/kube-audit-rest:${{github.ref_name}}-distroless'
          scan-ref: "ghcr.io/richardoc/kube-audit-rest:${{github.ref_name}}-distroless"
          format: 'sarif'
          output: 'distroless-results.sarif'
          github-pat: '${{ secrets.GITHUB_TOKEN }}'
      - name: Upload Trivy distroless scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'distroless-results.sarif'
          category: 'trivy-distroless-AMD64-release'
      - name: Run Trivy vulnerability scanner for alpine container
        uses: aquasecurity/trivy-action@0.13.1
        with:
          image-ref: 'ghcr.io/richardoc/kube-audit-rest:${{github.ref_name}}-alpine'
          scan-ref: "ghcr.io/richardoc/kube-audit-rest:${{github.ref_name}}-alpine"
          format: 'sarif'
          output: 'alpine-results.sarif'
          github-pat: '${{ secrets.GITHUB_TOKEN }}'
      - name: Upload Trivy alpine scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'alpine-results.sarif'
          category: 'trivy-alpine-AMD64-release'
  static-scan-with-trivy:
    # Explicitly grant the `secrets.GITHUB_TOKEN` permissions.
    permissions:
      # Grant the ability to write to GitHub Packages (push Docker images to
      # GitHub Container Registry).
      packages: write
      # Needed to upload the code scanning results to code-scanning dashboard.
      security-events: write
      # Needed to upload dependency graph
      contents: write

    name: Run trivy on the repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4.1.0
        with:
             fetch-depth: 0
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'repo-results.sarif'
          github-pat: '${{ secrets.GITHUB_TOKEN }}'
      - name: Upload Trivy repo scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'repo-results.sarif'
          category: 'trivy-repo-release'

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: '.'
          github-pat: ${{ secrets.GITHUB_TOKEN }}
           
